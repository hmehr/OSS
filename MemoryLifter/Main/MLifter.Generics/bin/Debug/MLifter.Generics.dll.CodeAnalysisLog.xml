<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Targets>
  <Target Name="C:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics\bin\Debug\MLifter.Generics.dll">
   <Modules>
    <Module Name="mlifter.generics.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'MLifter.Generics.dll' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'MLifter.Generics.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="MLifter.Generics">
       <Types>
        <Type Name="BruteForceAttackException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BruteForceAttackException': protected BruteForceAttackException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BruteForceAttackException': public BruteForceAttackException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BruteForceAttackException': public BruteForceAttackException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'BruteForceAttackException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ClientAccessLicenceCountExceededException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Licence" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Licence' in type name 'ClientAccessLicenceCountExceededException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ClientAccessLicenceCountExceededException': protected ClientAccessLicenceCountExceededException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ClientAccessLicenceCountExceededException': public ClientAccessLicenceCountExceededException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ClientAccessLicenceCountExceededException': public ClientAccessLicenceCountExceededException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ClientAccessLicenceCountExceededException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConnectionLostException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionLostException': protected ConnectionLostException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionLostException': public ConnectionLostException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionLostException': public ConnectionLostException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ConnectionLostException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CookieAwareWebClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetWebRequest(System.Uri)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1092">'request', a variable, is cast to type 'HttpWebRequest' multiple times in method 'CookieAwareWebClient.GetWebRequest(Uri)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CouldNotCloseLearningModuleException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotCloseLearningModuleException': protected CouldNotCloseLearningModuleException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotCloseLearningModuleException': public CouldNotCloseLearningModuleException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotCloseLearningModuleException': public CouldNotCloseLearningModuleException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'CouldNotCloseLearningModuleException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CouldNotOpenLearningModuleException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotOpenLearningModuleException': protected CouldNotOpenLearningModuleException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotOpenLearningModuleException': public CouldNotOpenLearningModuleException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotOpenLearningModuleException': public CouldNotOpenLearningModuleException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'CouldNotOpenLearningModuleException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CouldNotSetActivatedFlagException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotSetActivatedFlagException': protected CouldNotSetActivatedFlagException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotSetActivatedFlagException': public CouldNotSetActivatedFlagException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CouldNotSetActivatedFlagException': public CouldNotSetActivatedFlagException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'CouldNotSetActivatedFlagException' as this type implements ISerializable.</Issue>
          </Message>
          <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="Error">Replace the term 'Flag' in type name 'CouldNotSetActivatedFlagException' with an appropriate alternate or remove it entirely.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DataArray" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'DataArray' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'DataArray' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#EncryptedData" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DataArray.EncryptedData' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Signature" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DataArray.Signature' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnlockKey" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DataArray.UnlockKey' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseCloseException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCloseException': protected DatabaseCloseException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCloseException': public DatabaseCloseException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCloseException': public DatabaseCloseException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DatabaseCloseException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DatabaseCreateCommandException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCreateCommandException': protected DatabaseCreateCommandException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCreateCommandException': public DatabaseCreateCommandException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseCreateCommandException': public DatabaseCreateCommandException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DatabaseCreateCommandException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DatabaseExecuteException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseExecuteException': protected DatabaseExecuteException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseExecuteException': public DatabaseExecuteException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseExecuteException': public DatabaseExecuteException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DatabaseExecuteException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DatabaseOpenException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseOpenException': protected DatabaseOpenException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseOpenException': public DatabaseOpenException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DatabaseOpenException': public DatabaseOpenException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DatabaseOpenException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ForbiddenAuthenticationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ForbiddenAuthenticationException': protected ForbiddenAuthenticationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ForbiddenAuthenticationException': public ForbiddenAuthenticationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ForbiddenAuthenticationException': public ForbiddenAuthenticationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ForbiddenAuthenticationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidConfigFileException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidConfigFileException': protected InvalidConfigFileException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidConfigFileException': public InvalidConfigFileException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidConfigFileException': public InvalidConfigFileException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidConfigFileException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidCredentialsException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidCredentialsException': protected InvalidCredentialsException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidCredentialsException': public InvalidCredentialsException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidCredentialsException': public InvalidCredentialsException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidCredentialsException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidPasswordException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidPasswordException': protected InvalidPasswordException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidPasswordException': public InvalidPasswordException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidPasswordException': public InvalidPasswordException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidPasswordException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidUsernameException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Username' in type name 'InvalidUsernameException' should be expressed as a compound word, 'UserName'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidUsernameException': protected InvalidUsernameException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidUsernameException': public InvalidUsernameException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidUsernameException': public InvalidUsernameException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidUsernameException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="KeyArray" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'KeyArray' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'KeyArray' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#LicenseKey" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'KeyArray.LicenseKey' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnlockKey" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'KeyArray.UnlockKey' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LicenseAlreadyActivatedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseAlreadyActivatedException': protected LicenseAlreadyActivatedException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseAlreadyActivatedException': public LicenseAlreadyActivatedException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseAlreadyActivatedException': public LicenseAlreadyActivatedException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'LicenseAlreadyActivatedException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LicenseNotInDbException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseNotInDbException': protected LicenseNotInDbException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseNotInDbException': public LicenseNotInDbException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'LicenseNotInDbException': public LicenseNotInDbException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'LicenseNotInDbException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MachineIDGenerationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="TypeAbbreviation" Certainty="85" Level="Error">Correct the casing of 'ID' in type name 'MachineIDGenerationException' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MachineIDGenerationException': protected MachineIDGenerationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MachineIDGenerationException': public MachineIDGenerationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MachineIDGenerationException': public MachineIDGenerationException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MachineIDGenerationException': public MachineIDGenerationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MachineIDGenerationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exeption" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Exception.cs" Line="186">In method 'MachineIDGenerationException.MachineIDGenerationException(Exception)', correct the spelling of 'Exeption' in parameter name 'innerExeption' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Methods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'Methods' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ByteArrayToCompressedArrayString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bytes" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="176">In member 'Methods.ByteArrayToCompressedArrayString(byte[])', correct the casing of 'Bytes' in parameter name 'Bytes' by changing it to 'bytes'.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="176">In member 'Methods.ByteArrayToCompressedArrayString(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'Bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ByteArrayToHexString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bytes" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="603">In member 'Methods.ByteArrayToHexString(byte[])', correct the casing of 'Bytes' in parameter name 'Bytes' by changing it to 'bytes'.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="603">In member 'Methods.ByteArrayToHexString(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'Bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateLicenseKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="License" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="296">In member 'Methods.CreateLicenseKey(string)', correct the casing of 'License' in parameter name 'LicenseType' by changing it to 'license'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="309">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Methods.CreateLicenseKey(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractExponent(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Public" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="552">In member 'Methods.ExtractExponent(string)', correct the casing of 'Public' in parameter name 'PublicKey' by changing it to 'public'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractPublicKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Public" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="525">In member 'Methods.ExtractPublicKey(string)', correct the casing of 'Public' in parameter name 'PublicKey' by changing it to 'public'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateSymKey(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="332">In method 'Methods.GenerateSymKey(string)', call System.IDisposable.Dispose on object 'new MD5CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="331">In member 'Methods.GenerateSymKey(string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
            <Message Id="Sym" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="331">Correct the spelling of 'Sym' in member name 'Methods.GenerateSymKey(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="332">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Methods.GenerateSymKey(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFileSize(System.Int64)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bytes" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="920">In member 'Methods.GetFileSize(long)', correct the casing of 'Bytes' in parameter name 'Bytes' by changing it to 'bytes'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFileSize(System.Int64,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bytes" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="930">In member 'Methods.GetFileSize(long, bool)', correct the casing of 'Bytes' in parameter name 'Bytes' by changing it to 'bytes'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="934">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Methods.GetFileSize(long, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="939">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Methods.GetFileSize(long, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="944">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Methods.GetFileSize(long, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="949">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Methods.GetFileSize(long, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashedPassword(System.Security.SecureString)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="751">In method 'Methods.GetHashedPassword(SecureString)', call System.IDisposable.Dispose on object 'md5Hasher' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="756">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Methods.GetHashedPassword(SecureString)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashedPassword(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="769">In method 'Methods.GetHashedPassword(string)', call System.IDisposable.Dispose on object 'md5Hasher' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="774">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Methods.GetHashedPassword(string)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetInternetExplorerVersion()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="856">Modify 'Methods.GetInternetExplorerVersion()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="851">Change 'Methods.GetInternetExplorerVersion()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLearningModuleHash(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="871">In method 'Methods.GetLearningModuleHash(string)', call System.IDisposable.Dispose on object 'new MD5CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMID()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="684">In method 'Methods.GetMID()', call System.IDisposable.Dispose on object 'hashObject' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="688">'Methods.GetMID()' locks on a reference of type 'string'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
            <Message Id="MID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="667">Correct the casing of 'MID' in member name 'Methods.GetMID()' by changing it to 'Mid'.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="678">'Methods.GetMID()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="670">Replace the call to 'string.operator !=(string, string)' in 'Methods.GetMID()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="667">Change 'Methods.GetMID()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMLifterSticks()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="888">Change 'List&lt;DriveInfo&gt;' in 'Methods.GetMLifterSticks()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="893">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Methods.GetMLifterSticks()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="893">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Methods.GetMLifterSticks()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="893">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Methods.GetMLifterSticks()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="893">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Methods.GetMLifterSticks()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="888">Change 'Methods.GetMLifterSticks()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValidFileName(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="982">In member 'Methods.GetValidFileName(string, string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="982">Replace method 'Methods.GetValidFileName(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValidPathName(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="967">Replace method 'Methods.GetValidPathName(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowsMediaPlayerVersion()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="841">Modify 'Methods.GetWindowsMediaPlayerVersion()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="836">Change 'Methods.GetWindowsMediaPlayerVersion()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HexStringToByteArray(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Hex" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="625">In member 'Methods.HexStringToByteArray(string)', correct the casing of 'Hex' in parameter name 'Hex' by changing it to 'hex'.</Issue>
            </Message>
            <Message Id="System.Char.ToUpper(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="635">Because the behavior of 'char.ToUpper(char)' could vary based on the current user's locale settings, replace this call in 'Methods.HexStringToByteArray(string)' with a call to 'char.ToUpper(char, CultureInfo)'. If the result of 'char.ToUpper(char, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="635">Because the behavior of 'char.ToUpper(char)' could vary based on the current user's locale settings, replace this call in 'Methods.HexStringToByteArray(string)' with a call to 'char.ToUpper(char, CultureInfo)'. If the result of 'char.ToUpper(char, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Identifier(System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="727">In method 'Methods.Identifier(string, string)', call System.IDisposable.Dispose on object 'mc' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="724">'Methods.Identifier(string, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="737">'Methods.Identifier(string, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="ManagementObject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="737">Correct the spelling of the unrecognized token 'ManagementObject' in the literal '"ManagementObject list is empty"'.</Issue>
            </Message>
            <Message Id="wmiClass" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="724">Correct the spelling of the unrecognized token 'wmiClass' in the literal '"One of wmiClass, wmiProperty is either null or empty"'.</Issue>
            </Message>
            <Message Id="wmiProperty" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="724">Correct the spelling of the unrecognized token 'wmiProperty' in the literal '"One of wmiClass, wmiProperty is either null or empty"'.</Issue>
            </Message>
            <Message Id="result" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="726">'Methods.Identifier(string, string)' declares a variable, 'result', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="723">Replace the call to 'string.operator ==(string, string)' in 'Methods.Identifier(string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="723">Replace the call to 'string.operator ==(string, string)' in 'Methods.Identifier(string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEqual`1(!!0,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1070">Modify 'Methods.IsEqual&lt;T&gt;(T, T)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1065">Replace the call to 'string.operator ==(string, string)' in 'Methods.IsEqual&lt;T&gt;(T, T)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1065">Replace the call to 'string.operator ==(string, string)' in 'Methods.IsEqual&lt;T&gt;(T, T)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEven(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="502">Method 'Methods.IsEven(int)' passes parameter name 'block' as the 'message' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="502">Method 'Methods.IsEven(int)' passes '0 - 9999' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsOnMLifterStick(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="908">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Methods.IsOnMLifterStick(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="908">In externally visible method 'Methods.IsOnMLifterStick(string)', validate parameter 'path' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsRunningFromStick()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1014">Modify 'Methods.IsRunningFromStick()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="1030">Modify 'Methods.IsRunningFromStick()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsWMP7OrGreater()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="825">Modify 'Methods.IsWMP7OrGreater()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="WMP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="814">Correct the casing of 'WMP' in member name 'Methods.IsWMP7OrGreater()' by changing it to 'Wmp'.</Issue>
            </Message>
            <Message Id="o" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="821">'Methods.IsWMP7OrGreater()' declares a variable, 'o', of type 'object', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Right(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="650">In method 'Methods.Right(string, int)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TDesDecryptBytes(System.Byte[],System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="380">In method 'Methods.TDesDecryptBytes(byte[], string, bool)', call System.IDisposable.Dispose on object 'hashmd5' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="386">In method 'Methods.TDesDecryptBytes(byte[], string, bool)', call System.IDisposable.Dispose on object 'tdes' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="374">Method 'Methods.TDesDecryptBytes(byte[], string, bool)' passes parameter name 'key' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TDesEncryptBytes(System.Byte[],System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="457">In method 'Methods.TDesEncryptBytes(byte[], string, bool)', call System.IDisposable.Dispose on object 'hashmd5' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Methods.cs" Line="463">In method 'Methods.TDesEncryptBytes(byte[], string, bool)', call System.IDisposable.Dispose on object 'tdes' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModuleCategory" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ModuleCategory' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ModuleCategory' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Id" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleCategory.Id' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentCategory" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleCategory.ParentCategory' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Title" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleCategory.Title' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModuleInfo" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ModuleInfo' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ModuleInfo' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Author" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Author' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AuthorMail" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.AuthorMail' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AuthorUrl" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.AuthorUrl' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Cards" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Cards' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Categories" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Categories' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'SerializableList&lt;string&gt;' in 'ModuleInfo.Categories' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Description" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Description' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DownloadUrl" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.DownloadUrl' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EditDate" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.EditDate' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IconBig" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.IconBig' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IconSmall" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.IconSmall' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Id' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Preview" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Preview' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Size" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Size' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Title" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfo.Title' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ModuleInfoCacheItem" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ModuleInfoCacheItem' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ModuleInfoCacheItem' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IconBig" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfoCacheItem.IconBig' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IconSmall" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfoCacheItem.IconSmall' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfoCacheItem.Id' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Preview" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ModuleInfoCacheItem.Preview' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NoLMIdsFoundException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoLMIdsFoundException': protected NoLMIdsFoundException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoLMIdsFoundException': public NoLMIdsFoundException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoLMIdsFoundException': public NoLMIdsFoundException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NoLMIdsFoundException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NotEnoughtDiskSpaceException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Enought" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Enought' in type name 'NotEnoughtDiskSpaceException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NotEnoughtDiskSpaceException': protected NotEnoughtDiskSpaceException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NotEnoughtDiskSpaceException': public NotEnoughtDiskSpaceException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NotEnoughtDiskSpaceException': public NotEnoughtDiskSpaceException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NotEnoughtDiskSpaceException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NoWritableConnectionAvailableException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoWritableConnectionAvailableException': protected NoWritableConnectionAvailableException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoWritableConnectionAvailableException': public NoWritableConnectionAvailableException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoWritableConnectionAvailableException': public NoWritableConnectionAvailableException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NoWritableConnectionAvailableException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ObservableList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ObservableList&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="ObservableList.cs" Line="29">'ObservableList&lt;T&gt;.ObservableList(IEnumerable&lt;T&gt;)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ObservableList&lt;T&gt;..ctor(IEnumerable&lt;T&gt;)&#xD;&#xA;ObservableList&lt;T&gt;.AddRange(IEnumerable&lt;T&gt;):Void&#xD;&#xA;ObservableList&lt;T&gt;.OnListChanged(ObservableListChangedEventArgs&lt;T&gt;):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddRange(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="ObservableList.cs" Line="106">In externally visible method 'ObservableList&lt;T&gt;.AddRange(IEnumerable&lt;T&gt;)', validate parameter 'collection' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindAll(System.Predicate`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="ObservableList.cs" Line="147">Change 'List&lt;T&gt;' in 'ObservableList&lt;T&gt;.FindAll(Predicate&lt;T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Move(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="ObservableList.cs" Line="85">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PersistentMemoryCache`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'PersistentMemoryCache&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'PersistentMemoryCache&lt;T&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="82">Replace method 'PersistentMemoryCache&lt;T&gt;.AddOrGetExisting(string, object, DateTimeOffset, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="58">Replace method 'PersistentMemoryCache&lt;T&gt;.AddOrGetExisting(string, object, CacheItemPolicy, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Contains(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="99">Replace method 'PersistentMemoryCache&lt;T&gt;.Contains(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="125">Replace method 'PersistentMemoryCache&lt;T&gt;.CreateCacheEntryChangeMonitor(IEnumerable&lt;string&gt;, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefaultCacheCapabilities" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_DefaultCacheCapabilities()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="131">'PersistentMemoryCache&lt;T&gt;.DefaultCacheCapabilities.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="289">Change 'PersistentMemoryCache&lt;T&gt;.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="289">Modify 'PersistentMemoryCache&lt;T&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="143">Replace method 'PersistentMemoryCache&lt;T&gt;.Get(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCacheItem(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="158">Replace method 'PersistentMemoryCache&lt;T&gt;.GetCacheItem(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCount(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="169">Replace method 'PersistentMemoryCache&lt;T&gt;.GetCount(string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="197">Replace method 'PersistentMemoryCache&lt;T&gt;.GetValues(IEnumerable&lt;string&gt;, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="200">In externally visible method 'PersistentMemoryCache&lt;T&gt;.GetValues(IEnumerable&lt;string&gt;, string)', validate parameter 'keys' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="226">Replace method 'PersistentMemoryCache&lt;T&gt;.Remove(string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.String,System.Object,System.DateTimeOffset,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="262">Replace method 'PersistentMemoryCache&lt;T&gt;.Set(string, object, DateTimeOffset, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PersistentMemoryCache.cs" Line="244">Replace method 'PersistentMemoryCache&lt;T&gt;.Set(string, object, CacheItemPolicy, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProtectedLearningModuleException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ProtectedLearningModuleException': protected ProtectedLearningModuleException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ProtectedLearningModuleException': public ProtectedLearningModuleException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ProtectedLearningModuleException': public ProtectedLearningModuleException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ProtectedLearningModuleException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RandomPassword" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'RandomPassword' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Generate(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="139">In method 'RandomPassword.Generate(int, int)', call System.IDisposable.Dispose on object 'rng' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="97">Method 'RandomPassword.Generate(int, int)' passes parameter name 'maxLength' as the 'message' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="101">Method 'RandomPassword.Generate(int, int)' passes parameter name 'maxLength' as the 'message' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="95">Method 'RandomPassword.Generate(int, int)' passes parameter name 'minLength' as the 'message' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="99">Method 'RandomPassword.Generate(int, int)' passes parameter name 'minLength' as the 'message' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="97">Method 'RandomPassword.Generate(int, int)' passes 'maxLength &lt;= 0' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="101">Method 'RandomPassword.Generate(int, int)' passes 'maxLength &gt; 1000' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="95">Method 'RandomPassword.Generate(int, int)' passes 'minLength &lt;= 0' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="PasswordGenerator.cs" Line="99">Method 'RandomPassword.Generate(int, int)' passes 'minLength &gt; maxLength' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RSA" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="RSA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'RSA' in type name 'RSA' by changing it to 'Rsa'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'RSA' because it creates members of the following IDisposable types: 'RSACryptoServiceProvider'. If 'RSA' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#EncryptData(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Private" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="84">In member 'RSA.EncryptData(string, string)', correct the casing of 'Private' in parameter name 'PrivateKey' by changing it to 'private'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPrivateKey()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="73">Change 'RSA.GetPrivateKey()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPublicKey()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="44">Change 'RSA.GetPublicKey()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SignData(System.Byte[],System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="123">In method 'RSA.SignData(byte[], string)', call System.IDisposable.Dispose on object 'new SHA1CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Private" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="109">In member 'RSA.SignData(byte[], string)', correct the casing of 'Private' in parameter name 'PrivateKey' by changing it to 'private'.</Issue>
            </Message>
            <Message Id="plainbytes" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="109">In method 'RSA.SignData(byte[], string)', correct the spelling of 'plainbytes' in parameter name 'plainbytes' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VerifyData(System.Byte[],System.Byte[],System.Byte[],System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="RSA.cs" Line="149">In method 'RSA.VerifyData(byte[], byte[], byte[], byte[])', call System.IDisposable.Dispose on object 'new SHA1CryptoServiceProvider()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SerializableList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'SerializableList&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetFromInvariantString(System.Type,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="190">The 'this' parameter (or 'Me' in Visual Basic) of 'SerializableList&lt;T&gt;.GetFromInvariantString(Type, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetInvariantString(System.Type,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="256">The 'this' parameter (or 'Me' in Visual Basic) of 'SerializableList&lt;T&gt;.GetInvariantString(Type, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValue(System.Type,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToBoolean(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="107">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToByte(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="162">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToChar(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="158">Because the behavior of 'Convert.ToChar(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToChar(string, IFormatProvider)'. If the result of 'Convert.ToChar(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDecimal(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="154">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="119">Because the behavior of 'Convert.ToDouble(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToDouble(string, IFormatProvider)'. If the result of 'Convert.ToDouble(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="142">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="123">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="146">Because the behavior of 'Convert.ToInt64(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToInt64(string, IFormatProvider)'. If the result of 'Convert.ToInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToSingle(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="150">Because the behavior of 'Convert.ToSingle(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToSingle(string, IFormatProvider)'. If the result of 'Convert.ToSingle(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="166">Because the behavior of 'Convert.ToUInt16(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToUInt16(string, IFormatProvider)'. If the result of 'Convert.ToUInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="170">Because the behavior of 'Convert.ToUInt32(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToUInt32(string, IFormatProvider)'. If the result of 'Convert.ToUInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="174">Because the behavior of 'Convert.ToUInt64(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'Convert.ToUInt64(string, IFormatProvider)'. If the result of 'Convert.ToUInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="133">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.TimeSpan.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="138">Because the behavior of 'TimeSpan.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SerializableList&lt;T&gt;.GetValue(Type, string)' with a call to 'TimeSpan.Parse(string, IFormatProvider)'. If the result of 'TimeSpan.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadXml(System.Xml.XmlReader)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="69">In externally visible method 'SerializableList&lt;T&gt;.ReadXml(XmlReader)', validate parameter 'reader' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypeIsAtomic(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="268">Remove 'SerializableList&lt;T&gt;.TypeIsAtomic(Type)' from 'SerializableList&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="269">In externally visible method 'SerializableList&lt;T&gt;.TypeIsAtomic(Type)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypeIsNumeric(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="289">Remove 'SerializableList&lt;T&gt;.TypeIsNumeric(Type)' from 'SerializableList&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteXml(System.Xml.XmlWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="SerializableList.cs" Line="214">In externally visible method 'SerializableList&lt;T&gt;.WriteXml(XmlWriter)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServerOfflineException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ServerOfflineException': protected ServerOfflineException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ServerOfflineException': public ServerOfflineException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ServerOfflineException': public ServerOfflineException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ServerOfflineException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exeption" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Exception.cs" Line="320">In method 'ServerOfflineException.ServerOfflineException(Exception)', correct the spelling of 'Exeption' in parameter name 'innerExeption' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Exception.cs" Line="320">In externally visible method 'ServerOfflineException.ServerOfflineException(Exception)', validate parameter 'innerExeption' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SignatureInvalidException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SignatureInvalidException': protected SignatureInvalidException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SignatureInvalidException': public SignatureInvalidException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SignatureInvalidException': public SignatureInvalidException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'SignatureInvalidException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SynchronizationFailedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SynchronizationFailedException': protected SynchronizationFailedException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SynchronizationFailedException': public SynchronizationFailedException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SynchronizationFailedException': public SynchronizationFailedException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'SynchronizationFailedException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exeption" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Exception.cs" Line="339">In method 'SynchronizationFailedException.SynchronizationFailedException(Exception)', correct the spelling of 'Exeption' in parameter name 'innerExeption' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Projects\Memory Lifter\MemoryLifter\Main\MLifter.Generics" File="Exception.cs" Line="339">In externally visible method 'SynchronizationFailedException.SynchronizationFailedException(Exception)', validate parameter 'innerExeption' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserSessionCreationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionCreationException': protected UserSessionCreationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionCreationException': public UserSessionCreationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionCreationException': public UserSessionCreationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UserSessionCreationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UserSessionInvalidException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionInvalidException': protected UserSessionInvalidException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionInvalidException': public UserSessionInvalidException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UserSessionInvalidException': public UserSessionInvalidException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UserSessionInvalidException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="WebServerPortNullException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WebServer" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WebServer' in type name 'WebServerPortNullException' exists as a discrete term. If your usage is intended to be single word, case it as 'Webserver'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WebServerPortNullException': protected WebServerPortNullException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WebServerPortNullException': public WebServerPortNullException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'WebServerPortNullException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="WrongAuthenticationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongAuthenticationException': protected WrongAuthenticationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongAuthenticationException': public WrongAuthenticationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongAuthenticationException': public WrongAuthenticationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'WrongAuthenticationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="WrongKeyActivatedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongKeyActivatedException': protected WrongKeyActivatedException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongKeyActivatedException': public WrongKeyActivatedException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'WrongKeyActivatedException': public WrongKeyActivatedException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2013-10-23 21:39:51Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'WrongKeyActivatedException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182269(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="TypeShouldBeCompoundWord">The discrete term '{0}' in type name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
   <Name>Do not declare static members on generic types</Name>
   <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
   <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182139(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002">
   <Name>Do not lock on objects with weak identity</Name>
   <Description>Don't take locks on objects that may bleed across AppDomains or that don't have a strong identity.</Description>
   <Resolution Name="Default">{0} locks on a reference of type {1}. Replace this with a lock against an object with strong-identity.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182290(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="reliabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="TypeAbbreviation">Correct the casing of '{0}' in type name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectMessage">Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Resolution>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="TypeNoAlternate">Replace the term '{0}' in type name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
